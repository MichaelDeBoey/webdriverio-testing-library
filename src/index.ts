/* eslint-disable @typescript-eslint/no-implied-eval babel/no-invalid-this */

import path from 'path'
import fs from 'fs'
import {queries as baseQueries} from '@testing-library/dom'
import {Element, BrowserObject, MultiRemoteBrowserObject} from 'webdriverio'

import {Config, QueryName, WebdriverIOQueries} from './types'

declare global {
  interface Window {
    TestingLibraryDom: typeof baseQueries & {
      configure: typeof configure
    }
  }
}

const DOM_TESTING_LIBRARY_UMD_PATH = path.join(
  require.resolve('@testing-library/dom'),
  '../../',
  'dist/@testing-library/dom.umd.js',
)
const DOM_TESTING_LIBRARY_UMD = fs
  .readFileSync(DOM_TESTING_LIBRARY_UMD_PATH)
  .toString()

let _config: Partial<Config>

async function injectDOMTestingLibrary(container: Element) {
  await container.execute(DOM_TESTING_LIBRARY_UMD)

  if (_config) {
    await container.execute(function (config) {
      window.TestingLibraryDom.configure(config)
    }, _config)
  }
}

function serializeArgs(args: any[]) {
  return args.map((arg) => {
    if (arg instanceof RegExp) {
      return {RegExp: arg.toString()}
    }
    if (typeof arg === 'undefined') {
      return {Undefined: true}
    }
    return arg
  })
}

function executeQuery(
  [query, container, ...args]: [QueryName, HTMLElement, ...any[]],
  done: (result: any) => void,
) {
  const [matcher, options, waitForOptions] = args.map((arg) => {
    if (arg && arg.RegExp) {
      return eval(arg.RegExp)
    }
    if (arg && arg.Undefined) {
      return undefined
    }
    return arg
  })

  Promise.resolve(
    window.TestingLibraryDom[query](
      container,
      matcher,
      options,
      waitForOptions,
    ),
  )
    .then(done)
    .catch((e) => done(e.message))
}

/*
Always include element key "element-6066-11e4-a52e-4f735466cecf": WebdriverIO
checks whether this key is a string to determine if the selector is actually a
WebElement JSON. If the selector is a WebElement JSON it uses it to create a new
Element. There are valid WebElement JSONs that exclude the key but can be turned
into Elements, such as { ELEMENT: elementId }; this can happen in setups that
aren't generated by @wdio/cli.
*/
function createElement(container: Element, elementValue: any) {
  return container.$({
    'element-6066-11e4-a52e-4f735466cecf': '',
    ...elementValue,
  })
}

function createQuery(element: Element, queryName: string) {
  return async (...args: any[]) => {
    await injectDOMTestingLibrary(element)

    const result = await element.executeAsync<any[], any[]>(executeQuery, [
      queryName,
      element,
      ...serializeArgs(args),
    ])

    if (typeof result === 'string') {
      throw new Error(result)
    }

    if (!result) {
      return null
    }

    if (Array.isArray(result)) {
      return Promise.all(result.map(createElement.bind(null, element)))
    }

    return createElement(element, result)
  }
}

function within(element: Element) {
  return Object.keys(baseQueries).reduce(
    (queries, queryName) => ({
      ...queries,
      [queryName]: createQuery(element, queryName),
    }),
    {},
  ) as WebdriverIOQueries
}

async function setupBrowser(browser: BrowserObject | MultiRemoteBrowserObject) {
  const body = await browser.$('body')
  const queries = within(body)

  Object.entries(queries).forEach(([queryName, query]) => {
    // add query to BrowserObject
    browser.addCommand(queryName, query)

    // add query to scoped to Element
    browser.addCommand(
      queryName,
      function (...args) {
        // @ts-expect-error
        return within(this as Element)[queryName](...args)
      },
      true,
    )
  })

  return queries
}

function configure(config: Partial<Config>) {
  _config = config
}

export * from './types'
export {within, setupBrowser, configure}
