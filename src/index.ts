/* eslint-disable babel/no-invalid-this, no-eval */

import path from 'path'
import fs from 'fs'
import {queries as baseQueries} from '@testing-library/dom'
import 'simmerjs'

import {
  BrowserBase,
  Config,
  ElementBase,
  QueryName,
  WebdriverIOQueries,
} from './types'

declare global {
  interface Window {
    TestingLibraryDom: typeof baseQueries & {
      configure: typeof configure
    }
  }
}

const DOM_TESTING_LIBRARY_UMD_PATH = path.join(
  require.resolve('@testing-library/dom'),
  '../../',
  'dist/@testing-library/dom.umd.js',
)
const DOM_TESTING_LIBRARY_UMD = fs
  .readFileSync(DOM_TESTING_LIBRARY_UMD_PATH)
  .toString()

const SIMMERJS = fs
  .readFileSync(require.resolve('simmerjs/dist/simmer.js'))
  .toString()

let _config: Partial<Config>

async function injectDOMTestingLibrary(container: ElementBase) {
  const shouldInject = await container.execute(function () {
    return {
      domTestingLibrary: !window.TestingLibraryDom,
      simmer: !window.Simmer,
    }
  })

  if (shouldInject.domTestingLibrary) {
    await container.execute(function (library) {
      // add DOM Testing Library to page as a script tag to support Firefox
      if (navigator.userAgent.indexOf('Firefox') !== -1) {
        const script = document.createElement('script')
        script.innerHTML = library
        return document.head.append(script)
      }

      // eval library on other browsers
      return eval(library)
    }, DOM_TESTING_LIBRARY_UMD)
  }

  if (shouldInject.simmer) {
    await container.execute(SIMMERJS)
  }

  if (_config) {
    await container.execute(function (config: Config) {
      window.TestingLibraryDom.configure(config)
    }, _config)
  }
}

function serializeObject(object: Object): Object {
  return Object.entries(object)
    .map(([key, value]) => [key, serializeArg(value)])
    .reduce((acc, [key, value]) => ({...acc, [key]: value}), {})
}

function serializeArg(arg: any) {
  if (arg instanceof RegExp) {
    return {RegExp: arg.toString()}
  }
  if (typeof arg === 'undefined') {
    return {Undefined: true}
  }
  if (arg && typeof arg === 'object') {
    return serializeObject(arg)
  }
  return arg
}

function executeQuery(
  query: QueryName,
  container: HTMLElement,
  ...args: any[]
) {
  const done = args.pop() as (result: any) => void

  function deserializeObject(object: object): object {
    return Object.entries(object)
      .map(([key, value]) => [key, deserializeArg(value)])
      .reduce((acc, [key, value]) => ({...acc, [key]: value}), {})
  }

  function deserializeArg(arg: any) {
    if (arg && arg.RegExp) {
      return eval(arg.RegExp)
    }
    if (arg && arg.Undefined) {
      return undefined
    }
    if (arg && typeof arg === 'object') {
      return deserializeObject(arg)
    }
    return arg
  }

  const [matcher, options, waitForOptions] = args.map(deserializeArg)

  ;(async () => {
    let result: undefined | null | HTMLElement | HTMLElement[]
    try {
      result = await window.TestingLibraryDom[query](
        container,
        matcher,
        options,
        waitForOptions,
      )
    } catch (e) {
      done(e.message)
    }

    if (!result) {
      return done(null)
    }

    if (Array.isArray(result)) {
      return done(
        result.map((element) => ({
          selector: window.Simmer(element),
          element,
        })),
      )
    }

    return done({
      selector: window.Simmer(result),
      element: result,
    })
  })()
}

/*
Always include element key "element-6066-11e4-a52e-4f735466cecf": WebdriverIO
checks whether this key is a string to determine if the selector is actually a
WebElement JSON. If the selector is a WebElement JSON it uses it to create a new
Element. There are valid WebElement JSONs that exclude the key but can be turned
into Elements, such as { ELEMENT: elementId }; this can happen in setups that
aren't generated by @wdio/cli.
*/
function createElement(
  container: ElementBase,
  result: {selector: string | false; element: any},
) {
  // use selector if possible so that element can be refetched
  if (result.selector) {
    return container.$(result.selector)
  }

  // fallback to using WebElement JSON if selector could not be created
  return container.$({
    'element-6066-11e4-a52e-4f735466cecf': '',
    ...result.element,
  })
}

function createQuery(container: ElementBase, queryName: string) {
  return async (...args: any[]) => {
    await injectDOMTestingLibrary(container)

    const result = await container.executeAsync(
      executeQuery,
      queryName,
      container,
      ...args.map(serializeArg),
    )

    if (typeof result === 'string') {
      throw new Error(result)
    }

    if (!result) {
      return null
    }

    if (Array.isArray(result)) {
      return Promise.all(result.map(createElement.bind(null, container)))
    }

    return createElement(container, result)
  }
}

function within(element: ElementBase) {
  return Object.keys(baseQueries).reduce(
    (queries, queryName) => ({
      ...queries,
      [queryName]: createQuery(element, queryName),
    }),
    {},
  ) as WebdriverIOQueries
}

function setupBrowser(browser: BrowserBase) {
  const queries: {[key: string]: any} = {}

  Object.keys(baseQueries).forEach((key) => {
    const queryName = key as keyof typeof baseQueries

    const query = async (...args: any[]) => {
      const body = await browser.$('body')
      return within(body)[queryName](...args)
    }

    // add query to response queries
    queries[queryName] = query

    // add query to BrowserObject
    browser.addCommand(queryName, query)

    // add query to Elements
    browser.addCommand(
      queryName,
      function (this, ...args) {
        return within(this)[queryName](...args)
      },
      true,
    )
  })

  return queries as WebdriverIOQueries
}

function configure(config: Partial<Config>) {
  _config = config
}

export * from './types'
export {within, setupBrowser, configure}
